// 读取gnss-ins-sim生成的仿真数据

#include <iostream>
#include <istream>
#include <streambuf>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <stdlib.h>

int main()
{
    std::ifstream csv_data("test.csv", std::ios::in);
    std::string line;

    if (!csv_data.is_open())
    {
        std::cout << "Error: opening file fail" << std::endl;
        std::exit(1);
    }

    std::istringstream sin;         //将整行字符串line读入到字符串istringstream中
    std::vector<std::string> words; //声明一个字符串向量
    std::string word;

    // 读取标题行
    std::getline(csv_data, line);
    // 读取数据
    while (std::getline(csv_data, line))
    {
        sin.clear();
        sin.str(line);
        words.clear();
        while (std::getline(sin, word, ',')) //将字符串流sin中的字符读到field字符串中，以逗号为分隔符
        {
            words.push_back(word); //将每一格中的数据逐个push
            std::cout << word;
            // std::cout << atol(word.c_str());
        }
        std::cout << std::endl;
        // do something。。。
    }
    csv_data.close();
    return 0;
}



bool ReadData(const std::vector<std::string> &path,
              std::vector<double> &stamps,
              std::vector<Eigen::Vector3d> &accs,
              std::vector<Eigen::Vector3d> &gyros,
              std::vector<Eigen::Vector3d> &gpses,
              std::vector<Eigen::Vector3d> &ref_poses,
              std::vector<Eigen::Quaterniond> &ref_att_quats)
{
    stamps.clear();
    accs.clear();
    gyros.clear();
    gpses.clear();
    ref_poses.clear();
    ref_att_quats.clear();
    std::vector<std::ifstream> reads;
    // int count = 0;
    for (int i = 0; i < 6; ++i)
    {
        reads.push_back(std::ifstream(path[i]));
    }
    bool init = false;
    while (true)
    {
        if (!init)
        {
            init = true;
            for (int i = 0; i < 6; ++i)
            {
                std::string strs;
                std::getline(reads[i], strs);
            }
        }
        else
        {
            double time;
            {
                std::string strs;
                if (std::getline(reads[0], strs))
                {
                    // count++;
                    // count = count % 2;
                    // if (count != 0)
                    // {
                    //     continue;
                    // }
                    time = std::stod(strs);
                }
                else
                {
                    break;
                }
            }
            {
                std::string strs;
                std::string temp;

                strs = "";
                std::getline(reads[1], strs);
                temp = "";
                std::vector<double> acc;
                for (int i = 0; i < strs.size(); ++i)
                {
                    if (strs[i] == ',')
                    {
                        acc.push_back(std::stod(temp));
                        temp = "";
                    }
                    else
                    {
                        temp = temp + strs[i];
                    }
                }
                acc.push_back(std::stod(temp));

                strs = "";
                std::getline(reads[2], strs);
                temp = "";
                std::vector<double> gyro;
                for (int i = 0; i < strs.size(); ++i)
                {
                    if (strs[i] == ',')
                    {
                        gyro.push_back(std::stod(temp));
                        temp = "";
                    }
                    else
                    {
                        temp = temp + strs[i];
                    }
                }
                gyro.push_back(std::stod(temp));
                strs = "";
                std::getline(reads[3], strs);
                temp = "";
                std::vector<double> gps;
                for (int i = 0; i < strs.size(); ++i)
                {
                    if (strs[i] == ',')
                    {
                        gps.push_back(std::stod(temp));
                        temp = "";
                    }
                    else
                    {
                        temp = temp + strs[i];
                    }
                }
                gps.push_back(std::stod(temp));
                strs = "";
                std::getline(reads[4], strs);
                temp = "";
                std::vector<double> ref_pos;
                for (int i = 0; i < strs.size(); ++i)
                {
                    if (strs[i] == ',')
                    {
                        ref_pos.push_back(std::stod(temp));
                        temp = "";
                    }
                    else
                    {
                        temp = temp + strs[i];
                    }
                }
                ref_pos.push_back(std::stod(temp));
                strs = "";
                std::getline(reads[5], strs);
                temp = "";
                std::vector<double> ref_att_quat;
                for (int i = 0; i < strs.size(); ++i)
                {
                    if (strs[i] == ',')
                    {
                        ref_att_quat.push_back(std::stod(temp));
                        temp = "";
                    }
                    else
                    {
                        temp = temp + strs[i];
                    }
                }
                ref_att_quat.push_back(std::stod(temp));

                // std::cout << time << std::endl;
                // std::cout << (Eigen::Vector3d(acc[0], acc[1], acc[2])).transpose() << std::endl;
                // std::cout << (Eigen::Vector3d(gyro[0], gyro[1], gyro[2])).transpose() << std::endl;
                // std::cout << (Eigen::Vector3d(gps[0], gps[1], gps[2])).transpose() << std::endl;
                // std::cout << (Eigen::Vector3d(ref_pos[0], ref_pos[1], ref_pos[2])).transpose() << std::endl;
                // std::cout << (Eigen::Quaterniond(ref_att_quat[0], ref_att_quat[1], ref_att_quat[2], ref_att_quat[3])).coeffs().transpose() << std::endl;
                // throw;
                stamps.push_back(time);
                accs.push_back(Eigen::Vector3d(acc[0], acc[1], acc[2]));
                gyros.push_back(Eigen::Vector3d(gyro[0] * D2R, gyro[1] * D2R, gyro[2] * D2R));
                // 四元数(4x1)(Eigen::Quaterniond    旋转向量(3x1):Eigen::AngleAxisd  平移向量(3x1):Eigen::Vector3d
                Eigen::Quaterniond q = Eigen::AngleAxisd(90 * D2R, Eigen::Vector3d::UnitZ()) *    //以(0,0,1)做旋转轴，旋转90度
                                       Eigen::AngleAxisd(0, Eigen::Vector3d::UnitY()) *
                                       Eigen::AngleAxisd(180 * D2R, Eigen::Vector3d::UnitX());
                q = q.inverse();       // 初始化四元数
                gpses.push_back(Eigen::Vector3d(gps[0], gps[1], gps[2]));
                // std::cout << Eigen::Vector3d(ref_pos[0], ref_pos[1], ref_pos[2]) << std::endl;
                // std::cout << q * Eigen::Vector3d(ref_pos[0], ref_pos[1], ref_pos[2]) << std::endl;
                // throw;
                ref_poses.push_back(q * Eigen::Vector3d(ref_pos[0], ref_pos[1], ref_pos[2]));    // 存储 reference pose
                ref_att_quats.push_back(q * Eigen::Quaterniond(ref_att_quat[0], ref_att_quat[1], ref_att_quat[2], ref_att_quat[3]));   // 存储 reference  quaterniond
            }
        }
    }
}
